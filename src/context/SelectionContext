// import React, {
//   useState,
//   useEffect,
//   createContext,
//   useCallback,
//   useContext,
// } from 'react';

// import api from '../services/api';

// interface SelectionState {
//   token: string;
//   user: User;
// }

// interface SignInCredentials {
//   email: string;
//   password: string;
// }

// interface ContextData {
//   // eslint-disable-next-line @typescript-eslint/ban-types
//   user: User;
//   signIn(credentials: SignInCredentials): Promise<void>;
//   signOut(): void;
// }

// const SelectionContext = createContext<ContextData>({} as ContextData);

// export const SelectionProvider: React.FC = ({ children }) => {
//   const [data, setData] = useState<SelectionState>(() => {
//     const token = localStorage.getItem('@Workfloway:token');
//     const user = localStorage.getItem('@Workfloway:user');
//     if (token && user) {
//       return { token, user: JSON.parse(user) };
//     }
//     return {} as SelectionState;
//   });

//   const signIn = useCallback(async ({ email, password }: SignInCredentials) => {
//     const response = await api.post('/sessions', { email, password });
//     if (response.status === 200) {
//       const { token, user } = response.data;
//       localStorage.setItem('@Workfloway:token', token);
//       localStorage.setItem('@Workfloway:user', JSON.stringify(user));

//       setData({ token, user });
//     }
//   }, []);

//   const signOut = useCallback(() => {
//     localStorage.removeItem('@Workfloway:token');
//     localStorage.removeItem('@Workfloway:user');
//     setData({} as SelectionState);
//   }, []);

//   useEffect(() => {
//     localStorage.setItem('@Workfloway:auth', JSON.stringify(data));
//   }, [data]);

//   return (
//     <SelectionContext.Provider value={{ user: data.user, signIn, signOut }}>
//       {children}
//     </SelectionContext.Provider>
//   );
// };

// export function useSelection(): ContextData {
//   const context = useContext(SelectionContext);
//   if (!context) {
//     throw new Error('useWorkflow must be used within SelectionProvider');
//   }

//   return context;
// }
